
byggernV5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00000cac  00000d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001d8  008001d8  00000e18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002878  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eaf  00000000  00000000  0000394c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001102  00000000  00000000  000047fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  00005900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a5  00000000  00000000  00005ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001321  00000000  00000000  00006765  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00007a86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
   4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
  78:	00 06       	cpc	r0, r16
  7a:	5f 5f       	subi	r21, 0xFF	; 255
  7c:	06 00       	.word	0x0006	; ????
  7e:	00 00       	nop
  80:	00 07       	cpc	r16, r16
  82:	07 00       	.word	0x0007	; ????
  84:	07 07       	cpc	r16, r23
  86:	00 00       	nop
  88:	14 7f       	andi	r17, 0xF4	; 244
  8a:	7f 14       	cp	r7, r15
  8c:	7f 7f       	andi	r23, 0xFF	; 255
  8e:	14 00       	.word	0x0014	; ????
  90:	24 2e       	mov	r2, r20
  92:	6b 6b       	ori	r22, 0xBB	; 187
  94:	3a 12       	cpse	r3, r26
  96:	00 00       	nop
  98:	46 66       	ori	r20, 0x66	; 102
  9a:	30 18       	sub	r3, r0
  9c:	0c 66       	ori	r16, 0x6C	; 108
  9e:	62 00       	.word	0x0062	; ????
  a0:	30 7a       	andi	r19, 0xA0	; 160
  a2:	4f 5d       	subi	r20, 0xDF	; 223
  a4:	37 7a       	andi	r19, 0xA7	; 167
  a6:	48 00       	.word	0x0048	; ????
  a8:	04 07       	cpc	r16, r20
  aa:	03 00       	.word	0x0003	; ????
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	00 1c       	adc	r0, r0
  b2:	3e 63       	ori	r19, 0x3E	; 62
  b4:	41 00       	.word	0x0041	; ????
  b6:	00 00       	nop
  b8:	00 41       	sbci	r16, 0x10	; 16
  ba:	63 3e       	cpi	r22, 0xE3	; 227
  bc:	1c 00       	.word	0x001c	; ????
  be:	00 00       	nop
  c0:	08 2a       	or	r0, r24
  c2:	3e 1c       	adc	r3, r14
  c4:	1c 3e       	cpi	r17, 0xEC	; 236
  c6:	2a 08       	sbc	r2, r10
  c8:	08 08       	sbc	r0, r8
  ca:	3e 3e       	cpi	r19, 0xEE	; 238
  cc:	08 08       	sbc	r0, r8
  ce:	00 00       	nop
  d0:	00 a0       	ldd	r0, Z+32	; 0x20
  d2:	e0 60       	ori	r30, 0x00	; 0
  d4:	00 00       	nop
  d6:	00 00       	nop
  d8:	08 08       	sbc	r0, r8
  da:	08 08       	sbc	r0, r8
  dc:	08 08       	sbc	r0, r8
  de:	00 00       	nop
  e0:	00 00       	nop
  e2:	60 60       	ori	r22, 0x00	; 0
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	60 30       	cpi	r22, 0x00	; 0
  ea:	18 0c       	add	r1, r8
  ec:	06 03       	mulsu	r16, r22
  ee:	01 00       	.word	0x0001	; ????
  f0:	3e 7f       	andi	r19, 0xFE	; 254
  f2:	59 4d       	sbci	r21, 0xD9	; 217
  f4:	7f 3e       	cpi	r23, 0xEF	; 239
  f6:	00 00       	nop
  f8:	42 42       	sbci	r20, 0x22	; 34
  fa:	7f 7f       	andi	r23, 0xFF	; 255
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	00 00       	nop
 100:	62 73       	andi	r22, 0x32	; 50
 102:	59 49       	sbci	r21, 0x99	; 153
 104:	6f 66       	ori	r22, 0x6F	; 111
 106:	00 00       	nop
 108:	22 63       	ori	r18, 0x32	; 50
 10a:	49 49       	sbci	r20, 0x99	; 153
 10c:	7f 36       	cpi	r23, 0x6F	; 111
 10e:	00 00       	nop
 110:	18 1c       	adc	r1, r8
 112:	16 13       	cpse	r17, r22
 114:	7f 7f       	andi	r23, 0xFF	; 255
 116:	10 00       	.word	0x0010	; ????
 118:	27 67       	ori	r18, 0x77	; 119
 11a:	45 45       	sbci	r20, 0x55	; 85
 11c:	7d 39       	cpi	r23, 0x9D	; 157
 11e:	00 00       	nop
 120:	3c 7e       	andi	r19, 0xEC	; 236
 122:	4b 49       	sbci	r20, 0x9B	; 155
 124:	79 30       	cpi	r23, 0x09	; 9
 126:	00 00       	nop
 128:	03 63       	ori	r16, 0x33	; 51
 12a:	71 19       	sub	r23, r1
 12c:	0f 07       	cpc	r16, r31
 12e:	00 00       	nop
 130:	36 7f       	andi	r19, 0xF6	; 246
 132:	49 49       	sbci	r20, 0x99	; 153
 134:	7f 36       	cpi	r23, 0x6F	; 111
 136:	00 00       	nop
 138:	06 4f       	sbci	r16, 0xF6	; 246
 13a:	49 69       	ori	r20, 0x99	; 153
 13c:	3f 1e       	adc	r3, r31
 13e:	00 00       	nop
 140:	00 00       	nop
 142:	6c 6c       	ori	r22, 0xCC	; 204
 144:	00 00       	nop
 146:	00 00       	nop
 148:	00 a0       	ldd	r0, Z+32	; 0x20
 14a:	ec 6c       	ori	r30, 0xCC	; 204
 14c:	00 00       	nop
 14e:	00 00       	nop
 150:	08 1c       	adc	r0, r8
 152:	36 63       	ori	r19, 0x36	; 54
 154:	41 00       	.word	0x0041	; ????
 156:	00 00       	nop
 158:	14 14       	cp	r1, r4
 15a:	14 14       	cp	r1, r4
 15c:	14 14       	cp	r1, r4
 15e:	00 00       	nop
 160:	00 41       	sbci	r16, 0x10	; 16
 162:	63 36       	cpi	r22, 0x63	; 99
 164:	1c 08       	sbc	r1, r12
 166:	00 00       	nop
 168:	02 03       	mulsu	r16, r18
 16a:	51 59       	subi	r21, 0x91	; 145
 16c:	0f 06       	cpc	r0, r31
 16e:	00 00       	nop
 170:	3e 7f       	andi	r19, 0xFE	; 254
 172:	41 5d       	subi	r20, 0xD1	; 209
 174:	5d 1f       	adc	r21, r29
 176:	1e 00       	.word	0x001e	; ????
 178:	7c 7e       	andi	r23, 0xEC	; 236
 17a:	13 13       	cpse	r17, r19
 17c:	7e 7c       	andi	r23, 0xCE	; 206
 17e:	00 00       	nop
 180:	41 7f       	andi	r20, 0xF1	; 241
 182:	7f 49       	sbci	r23, 0x9F	; 159
 184:	49 7f       	andi	r20, 0xF9	; 249
 186:	36 00       	.word	0x0036	; ????
 188:	1c 3e       	cpi	r17, 0xEC	; 236
 18a:	63 41       	sbci	r22, 0x13	; 19
 18c:	41 63       	ori	r20, 0x31	; 49
 18e:	22 00       	.word	0x0022	; ????
 190:	41 7f       	andi	r20, 0xF1	; 241
 192:	7f 41       	sbci	r23, 0x1F	; 31
 194:	63 7f       	andi	r22, 0xF3	; 243
 196:	1c 00       	.word	0x001c	; ????
 198:	41 7f       	andi	r20, 0xF1	; 241
 19a:	7f 49       	sbci	r23, 0x9F	; 159
 19c:	5d 41       	sbci	r21, 0x1D	; 29
 19e:	63 00       	.word	0x0063	; ????
 1a0:	41 7f       	andi	r20, 0xF1	; 241
 1a2:	7f 49       	sbci	r23, 0x9F	; 159
 1a4:	1d 01       	movw	r2, r26
 1a6:	03 00       	.word	0x0003	; ????
 1a8:	1c 3e       	cpi	r17, 0xEC	; 236
 1aa:	63 41       	sbci	r22, 0x13	; 19
 1ac:	51 73       	andi	r21, 0x31	; 49
 1ae:	72 00       	.word	0x0072	; ????
 1b0:	7f 7f       	andi	r23, 0xFF	; 255
 1b2:	08 08       	sbc	r0, r8
 1b4:	7f 7f       	andi	r23, 0xFF	; 255
 1b6:	00 00       	nop
 1b8:	00 41       	sbci	r16, 0x10	; 16
 1ba:	7f 7f       	andi	r23, 0xFF	; 255
 1bc:	41 00       	.word	0x0041	; ????
 1be:	00 00       	nop
 1c0:	30 70       	andi	r19, 0x00	; 0
 1c2:	40 41       	sbci	r20, 0x10	; 16
 1c4:	7f 3f       	cpi	r23, 0xFF	; 255
 1c6:	01 00       	.word	0x0001	; ????
 1c8:	41 7f       	andi	r20, 0xF1	; 241
 1ca:	7f 08       	sbc	r7, r15
 1cc:	1c 77       	andi	r17, 0x7C	; 124
 1ce:	63 00       	.word	0x0063	; ????
 1d0:	41 7f       	andi	r20, 0xF1	; 241
 1d2:	7f 41       	sbci	r23, 0x1F	; 31
 1d4:	40 60       	ori	r20, 0x00	; 0
 1d6:	70 00       	.word	0x0070	; ????
 1d8:	7f 7f       	andi	r23, 0xFF	; 255
 1da:	06 0c       	add	r0, r6
 1dc:	06 7f       	andi	r16, 0xF6	; 246
 1de:	7f 00       	.word	0x007f	; ????
 1e0:	7f 7f       	andi	r23, 0xFF	; 255
 1e2:	06 0c       	add	r0, r6
 1e4:	18 7f       	andi	r17, 0xF8	; 248
 1e6:	7f 00       	.word	0x007f	; ????
 1e8:	1c 3e       	cpi	r17, 0xEC	; 236
 1ea:	63 41       	sbci	r22, 0x13	; 19
 1ec:	63 3e       	cpi	r22, 0xE3	; 227
 1ee:	1c 00       	.word	0x001c	; ????
 1f0:	41 7f       	andi	r20, 0xF1	; 241
 1f2:	7f 49       	sbci	r23, 0x9F	; 159
 1f4:	09 0f       	add	r16, r25
 1f6:	06 00       	.word	0x0006	; ????
 1f8:	1e 3f       	cpi	r17, 0xFE	; 254
 1fa:	21 71       	andi	r18, 0x11	; 17
 1fc:	7f 5e       	subi	r23, 0xEF	; 239
 1fe:	00 00       	nop
 200:	41 7f       	andi	r20, 0xF1	; 241
 202:	7f 19       	sub	r23, r15
 204:	39 6f       	ori	r19, 0xF9	; 249
 206:	46 00       	.word	0x0046	; ????
 208:	26 67       	ori	r18, 0x76	; 118
 20a:	4d 59       	subi	r20, 0x9D	; 157
 20c:	7b 32       	cpi	r23, 0x2B	; 43
 20e:	00 00       	nop
 210:	03 41       	sbci	r16, 0x13	; 19
 212:	7f 7f       	andi	r23, 0xFF	; 255
 214:	41 03       	mulsu	r20, r17
 216:	00 00       	nop
 218:	7f 7f       	andi	r23, 0xFF	; 255
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	7f 7f       	andi	r23, 0xFF	; 255
 21e:	00 00       	nop
 220:	1f 3f       	cpi	r17, 0xFF	; 255
 222:	60 60       	ori	r22, 0x00	; 0
 224:	3f 1f       	adc	r19, r31
 226:	00 00       	nop
 228:	7f 7f       	andi	r23, 0xFF	; 255
 22a:	30 18       	sub	r3, r0
 22c:	30 7f       	andi	r19, 0xF0	; 240
 22e:	7f 00       	.word	0x007f	; ????
 230:	63 77       	andi	r22, 0x73	; 115
 232:	1c 08       	sbc	r1, r12
 234:	1c 77       	andi	r17, 0x7C	; 124
 236:	63 00       	.word	0x0063	; ????
 238:	07 4f       	sbci	r16, 0xF7	; 247
 23a:	78 78       	andi	r23, 0x88	; 136
 23c:	4f 07       	cpc	r20, r31
 23e:	00 00       	nop
 240:	67 73       	andi	r22, 0x37	; 55
 242:	59 4d       	sbci	r21, 0xD9	; 217
 244:	47 63       	ori	r20, 0x37	; 55
 246:	71 00       	.word	0x0071	; ????
 248:	00 7f       	andi	r16, 0xF0	; 240
 24a:	7f 41       	sbci	r23, 0x1F	; 31
 24c:	41 00       	.word	0x0041	; ????
 24e:	00 00       	nop
 250:	01 03       	mulsu	r16, r17
 252:	06 0c       	add	r0, r6
 254:	18 30       	cpi	r17, 0x08	; 8
 256:	60 00       	.word	0x0060	; ????
 258:	00 41       	sbci	r16, 0x10	; 16
 25a:	41 7f       	andi	r20, 0xF1	; 241
 25c:	7f 00       	.word	0x007f	; ????
 25e:	00 00       	nop
 260:	08 0c       	add	r0, r8
 262:	06 03       	mulsu	r16, r22
 264:	06 0c       	add	r0, r6
 266:	08 00       	.word	0x0008	; ????
 268:	80 80       	ld	r8, Z
 26a:	80 80       	ld	r8, Z
 26c:	80 80       	ld	r8, Z
 26e:	80 80       	ld	r8, Z
 270:	00 00       	nop
 272:	03 07       	cpc	r16, r19
 274:	04 00       	.word	0x0004	; ????
 276:	00 00       	nop
 278:	20 74       	andi	r18, 0x40	; 64
 27a:	54 54       	subi	r21, 0x44	; 68
 27c:	3c 78       	andi	r19, 0x8C	; 140
 27e:	40 00       	.word	0x0040	; ????
 280:	41 3f       	cpi	r20, 0xF1	; 241
 282:	7f 44       	sbci	r23, 0x4F	; 79
 284:	44 7c       	andi	r20, 0xC4	; 196
 286:	38 00       	.word	0x0038	; ????
 288:	38 7c       	andi	r19, 0xC8	; 200
 28a:	44 44       	sbci	r20, 0x44	; 68
 28c:	6c 28       	or	r6, r12
 28e:	00 00       	nop
 290:	30 78       	andi	r19, 0x80	; 128
 292:	48 49       	sbci	r20, 0x98	; 152
 294:	3f 7f       	andi	r19, 0xFF	; 255
 296:	40 00       	.word	0x0040	; ????
 298:	38 7c       	andi	r19, 0xC8	; 200
 29a:	54 54       	subi	r21, 0x44	; 68
 29c:	5c 18       	sub	r5, r12
 29e:	00 00       	nop
 2a0:	48 7e       	andi	r20, 0xE8	; 232
 2a2:	7f 49       	sbci	r23, 0x9F	; 159
 2a4:	03 02       	muls	r16, r19
 2a6:	00 00       	nop
 2a8:	98 bc       	out	0x28, r9	; 40
 2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
 2ac:	f8 7c       	andi	r31, 0xC8	; 200
 2ae:	04 00       	.word	0x0004	; ????
 2b0:	41 7f       	andi	r20, 0xF1	; 241
 2b2:	7f 08       	sbc	r7, r15
 2b4:	04 7c       	andi	r16, 0xC4	; 196
 2b6:	78 00       	.word	0x0078	; ????
 2b8:	00 44       	sbci	r16, 0x40	; 64
 2ba:	7d 7d       	andi	r23, 0xDD	; 221
 2bc:	40 00       	.word	0x0040	; ????
 2be:	00 00       	nop
 2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <malloc+0x11e>
 2c2:	84 fd       	sbrc	r24, 4
 2c4:	7d 00       	.word	0x007d	; ????
 2c6:	00 00       	nop
 2c8:	41 7f       	andi	r20, 0xF1	; 241
 2ca:	7f 10       	cpse	r7, r15
 2cc:	38 6c       	ori	r19, 0xC8	; 200
 2ce:	44 00       	.word	0x0044	; ????
 2d0:	00 41       	sbci	r16, 0x10	; 16
 2d2:	7f 7f       	andi	r23, 0xFF	; 255
 2d4:	40 00       	.word	0x0040	; ????
 2d6:	00 00       	nop
 2d8:	7c 7c       	andi	r23, 0xCC	; 204
 2da:	0c 18       	sub	r0, r12
 2dc:	0c 7c       	andi	r16, 0xCC	; 204
 2de:	78 00       	.word	0x0078	; ????
 2e0:	7c 7c       	andi	r23, 0xCC	; 204
 2e2:	04 04       	cpc	r0, r4
 2e4:	7c 78       	andi	r23, 0x8C	; 140
 2e6:	00 00       	nop
 2e8:	38 7c       	andi	r19, 0xC8	; 200
 2ea:	44 44       	sbci	r20, 0x44	; 68
 2ec:	7c 38       	cpi	r23, 0x8C	; 140
 2ee:	00 00       	nop
 2f0:	84 fc       	sbrc	r8, 4
 2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
 2f4:	24 3c       	cpi	r18, 0xC4	; 196
 2f6:	18 00       	.word	0x0018	; ????
 2f8:	18 3c       	cpi	r17, 0xC8	; 200
 2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
 2fc:	f8 fc       	.word	0xfcf8	; ????
 2fe:	84 00       	.word	0x0084	; ????
 300:	44 7c       	andi	r20, 0xC4	; 196
 302:	78 44       	sbci	r23, 0x48	; 72
 304:	1c 18       	sub	r1, r12
 306:	00 00       	nop
 308:	48 5c       	subi	r20, 0xC8	; 200
 30a:	54 54       	subi	r21, 0x44	; 68
 30c:	74 24       	eor	r7, r4
 30e:	00 00       	nop
 310:	00 04       	cpc	r0, r0
 312:	3e 7f       	andi	r19, 0xFE	; 254
 314:	44 24       	eor	r4, r4
 316:	00 00       	nop
 318:	3c 7c       	andi	r19, 0xCC	; 204
 31a:	40 40       	sbci	r20, 0x00	; 0
 31c:	3c 7c       	andi	r19, 0xCC	; 204
 31e:	40 00       	.word	0x0040	; ????
 320:	1c 3c       	cpi	r17, 0xCC	; 204
 322:	60 60       	ori	r22, 0x00	; 0
 324:	3c 1c       	adc	r3, r12
 326:	00 00       	nop
 328:	3c 7c       	andi	r19, 0xCC	; 204
 32a:	60 30       	cpi	r22, 0x00	; 0
 32c:	60 7c       	andi	r22, 0xC0	; 192
 32e:	3c 00       	.word	0x003c	; ????
 330:	44 6c       	ori	r20, 0xC4	; 196
 332:	38 10       	cpse	r3, r8
 334:	38 6c       	ori	r19, 0xC8	; 200
 336:	44 00       	.word	0x0044	; ????
 338:	9c bc       	out	0x2c, r9	; 44
 33a:	a0 a0       	ldd	r10, Z+32	; 0x20
 33c:	fc 7c       	andi	r31, 0xCC	; 204
 33e:	00 00       	nop
 340:	4c 64       	ori	r20, 0x4C	; 76
 342:	74 5c       	subi	r23, 0xC4	; 196
 344:	4c 64       	ori	r20, 0x4C	; 76
 346:	00 00       	nop
 348:	08 08       	sbc	r0, r8
 34a:	3e 77       	andi	r19, 0x7E	; 126
 34c:	41 41       	sbci	r20, 0x11	; 17
 34e:	00 00       	nop
 350:	00 00       	nop
 352:	00 77       	andi	r16, 0x70	; 112
 354:	77 00       	.word	0x0077	; ????
 356:	00 00       	nop
 358:	41 41       	sbci	r20, 0x11	; 17
 35a:	77 3e       	cpi	r23, 0xE7	; 231
 35c:	08 08       	sbc	r0, r8
 35e:	00 00       	nop
 360:	02 03       	mulsu	r16, r18
 362:	01 03       	mulsu	r16, r17
 364:	02 03       	mulsu	r16, r18
 366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
 368:	11 24       	eor	r1, r1
 36a:	1f be       	out	0x3f, r1	; 63
 36c:	cf ef       	ldi	r28, 0xFF	; 255
 36e:	d4 e0       	ldi	r29, 0x04	; 4
 370:	de bf       	out	0x3e, r29	; 62
 372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
 374:	11 e0       	ldi	r17, 0x01	; 1
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b1 e0       	ldi	r27, 0x01	; 1
 37a:	ec ea       	ldi	r30, 0xAC	; 172
 37c:	fc e0       	ldi	r31, 0x0C	; 12
 37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
 380:	05 90       	lpm	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	a8 3d       	cpi	r26, 0xD8	; 216
 386:	b1 07       	cpc	r27, r17
 388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	a8 ed       	ldi	r26, 0xD8	; 216
 38e:	b1 e0       	ldi	r27, 0x01	; 1
 390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
 392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
 394:	a2 3e       	cpi	r26, 0xE2	; 226
 396:	b2 07       	cpc	r27, r18
 398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
 39a:	0e 94 95 04 	call	0x92a	; 0x92a <main>
 39e:	0c 94 54 06 	jmp	0xca8	; 0xca8 <_exit>

000003a2 <__bad_interrupt>:
 3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_cntrl_read>:
	SPI_SS_low();
	SPI_MasterTransmit(0xA0);
	int8_t result = SPI_MasterTransmit(0x0); //Output
	SPI_SS_high();
	return result;
}
 3a6:	cf 93       	push	r28
 3a8:	c8 2f       	mov	r28, r24
 3aa:	0e 94 cf 04 	call	0x99e	; 0x99e <SPI_SS_low>
 3ae:	83 e0       	ldi	r24, 0x03	; 3
 3b0:	0e 94 de 04 	call	0x9bc	; 0x9bc <SPI_MasterTransmit>
 3b4:	8c 2f       	mov	r24, r28
 3b6:	0e 94 de 04 	call	0x9bc	; 0x9bc <SPI_MasterTransmit>
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 de 04 	call	0x9bc	; 0x9bc <SPI_MasterTransmit>
 3c0:	c8 2f       	mov	r28, r24
 3c2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <SPI_SS_high>
 3c6:	8c 2f       	mov	r24, r28
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <can_cntrl_write>:
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	d8 2f       	mov	r29, r24
 3d4:	c6 2f       	mov	r28, r22
 3d6:	0e 94 cf 04 	call	0x99e	; 0x99e <SPI_SS_low>
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	0e 94 de 04 	call	0x9bc	; 0x9bc <SPI_MasterTransmit>
 3e0:	8d 2f       	mov	r24, r29
 3e2:	0e 94 de 04 	call	0x9bc	; 0x9bc <SPI_MasterTransmit>
 3e6:	8c 2f       	mov	r24, r28
 3e8:	0e 94 de 04 	call	0x9bc	; 0x9bc <SPI_MasterTransmit>
 3ec:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <SPI_SS_high>
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <can_cntrl_reset>:
 3f6:	0e 94 cf 04 	call	0x99e	; 0x99e <SPI_SS_low>
 3fa:	80 ec       	ldi	r24, 0xC0	; 192
 3fc:	0e 94 de 04 	call	0x9bc	; 0x9bc <SPI_MasterTransmit>
 400:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <SPI_SS_high>
 404:	08 95       	ret

00000406 <can_cntrl_RTS>:
 406:	cf 93       	push	r28
 408:	c8 2f       	mov	r28, r24
 40a:	0e 94 cf 04 	call	0x99e	; 0x99e <SPI_SS_low>
 40e:	8c 2f       	mov	r24, r28
 410:	81 68       	ori	r24, 0x81	; 129
 412:	0e 94 de 04 	call	0x9bc	; 0x9bc <SPI_MasterTransmit>
 416:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <SPI_SS_high>
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <can_cntrl_config>:
}
*/


void can_cntrl_config(void){
	can_cntrl_reset();
 41e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <can_cntrl_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 422:	89 ef       	ldi	r24, 0xF9	; 249
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <can_cntrl_config+0x8>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <can_cntrl_config+0xe>
 42c:	00 00       	nop
	_delay_ms(1); //delay viktig 
	SPI_SS_low();
 42e:	0e 94 cf 04 	call	0x99e	; 0x99e <SPI_SS_low>
	
	uint8_t cnf1_value = (1 << 6) | BRP;
	uint8_t cnf2_value = (1 << 7) | (1 << 3) | 1;
	uint8_t cnf3_value = 2;
	
	can_cntrl_write(CNF1, cnf1_value);
 432:	61 e4       	ldi	r22, 0x41	; 65
 434:	8a e2       	ldi	r24, 0x2A	; 42
 436:	0e 94 e7 01 	call	0x3ce	; 0x3ce <can_cntrl_write>
	can_cntrl_write(CNF2, cnf2_value);
 43a:	69 e8       	ldi	r22, 0x89	; 137
 43c:	89 e2       	ldi	r24, 0x29	; 41
 43e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <can_cntrl_write>
	can_cntrl_write(CNF3, cnf3_value);
 442:	62 e0       	ldi	r22, 0x02	; 2
 444:	88 e2       	ldi	r24, 0x28	; 40
 446:	0e 94 e7 01 	call	0x3ce	; 0x3ce <can_cntrl_write>
	
	//Set operation mode
	int8_t canctrl_value = can_cntrl_read(CANCTRL);
 44a:	8f e0       	ldi	r24, 0x0F	; 15
 44c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_cntrl_read>
	canctrl_value &= ~(0xE0);
 450:	68 2f       	mov	r22, r24
 452:	6f 71       	andi	r22, 0x1F	; 31
	canctrl_value |= (0x00 << 5);
	
	can_cntrl_write(CANCTRL, canctrl_value);
 454:	8f e0       	ldi	r24, 0x0F	; 15
 456:	0e 94 e7 01 	call	0x3ce	; 0x3ce <can_cntrl_write>
	can_cntrl_write(RXF0SIDH, 0x00);
	can_cntrl_write(RXF0SIDL, 0x00);
	can_cntrl_write(RXF1SIDH, 0x00);
	can_cntrl_write(RXF1SIDL, 0x00);*/
	
	SPI_SS_high();
 45a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <SPI_SS_high>
 45e:	08 95       	ret

00000460 <can_message_send>:
}



void can_message_send (can_message * msg ) {
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	8c 01       	movw	r16, r24
	can_cntrl_write(TXB0SIDH, msg->id >> 3); 
 46a:	fc 01       	movw	r30, r24
 46c:	60 81       	ld	r22, Z
 46e:	71 81       	ldd	r23, Z+1	; 0x01
 470:	76 95       	lsr	r23
 472:	67 95       	ror	r22
 474:	76 95       	lsr	r23
 476:	67 95       	ror	r22
 478:	76 95       	lsr	r23
 47a:	67 95       	ror	r22
 47c:	81 e3       	ldi	r24, 0x31	; 49
 47e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <can_cntrl_write>
	can_cntrl_write(TXB0SIDL, (msg->id & 0x07) << 5); 
 482:	f8 01       	movw	r30, r16
 484:	60 81       	ld	r22, Z
 486:	62 95       	swap	r22
 488:	66 0f       	add	r22, r22
 48a:	60 7e       	andi	r22, 0xE0	; 224
 48c:	82 e3       	ldi	r24, 0x32	; 50
 48e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <can_cntrl_write>
	can_cntrl_write(TXB0DLC, msg->data_length);
 492:	f8 01       	movw	r30, r16
 494:	62 81       	ldd	r22, Z+2	; 0x02
 496:	85 e3       	ldi	r24, 0x35	; 53
 498:	0e 94 e7 01 	call	0x3ce	; 0x3ce <can_cntrl_write>
	
	for (int i = 0; i < msg->data_length; i++){
 49c:	c0 e0       	ldi	r28, 0x00	; 0
 49e:	d0 e0       	ldi	r29, 0x00	; 0
 4a0:	09 c0       	rjmp	.+18     	; 0x4b4 <can_message_send+0x54>
		can_cntrl_write(TXB0D0+i, msg->data[i]);
 4a2:	f8 01       	movw	r30, r16
 4a4:	ec 0f       	add	r30, r28
 4a6:	fd 1f       	adc	r31, r29
 4a8:	63 81       	ldd	r22, Z+3	; 0x03
 4aa:	8c 2f       	mov	r24, r28
 4ac:	8a 5c       	subi	r24, 0xCA	; 202
 4ae:	0e 94 e7 01 	call	0x3ce	; 0x3ce <can_cntrl_write>
void can_message_send (can_message * msg ) {
	can_cntrl_write(TXB0SIDH, msg->id >> 3); 
	can_cntrl_write(TXB0SIDL, (msg->id & 0x07) << 5); 
	can_cntrl_write(TXB0DLC, msg->data_length);
	
	for (int i = 0; i < msg->data_length; i++){
 4b2:	21 96       	adiw	r28, 0x01	; 1
 4b4:	f8 01       	movw	r30, r16
 4b6:	82 81       	ldd	r24, Z+2	; 0x02
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	c8 17       	cp	r28, r24
 4bc:	d9 07       	cpc	r29, r25
 4be:	8c f3       	brlt	.-30     	; 0x4a2 <can_message_send+0x42>
		can_cntrl_write(TXB0D0+i, msg->data[i]);
	}
	can_cntrl_RTS(0x01);
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 03 02 	call	0x406	; 0x406 <can_cntrl_RTS>
}
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	0f 91       	pop	r16
 4ce:	08 95       	ret

000004d0 <io_init>:
	}
}


void OLED_home(char* menu_list[], int16_t length){
	OLED_print_menu(menu_list, length);
 4d0:	fc 01       	movw	r30, r24
 4d2:	11 82       	std	Z+1, r1	; 0x01
 4d4:	10 82       	st	Z, r1
 4d6:	13 82       	std	Z+3, r1	; 0x03
 4d8:	12 82       	std	Z+2, r1	; 0x02
 4da:	15 82       	std	Z+5, r1	; 0x05
 4dc:	14 82       	std	Z+4, r1	; 0x04
 4de:	17 82       	std	Z+7, r1	; 0x07
 4e0:	16 82       	std	Z+6, r1	; 0x06
 4e2:	84 e0       	ldi	r24, 0x04	; 4
 4e4:	80 87       	std	Z+8, r24	; 0x08
 4e6:	11 86       	std	Z+9, r1	; 0x09
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	82 87       	std	Z+10, r24	; 0x0a
 4ec:	13 86       	std	Z+11, r1	; 0x0b
 4ee:	15 86       	std	Z+13, r1	; 0x0d
 4f0:	14 86       	std	Z+12, r1	; 0x0c
 4f2:	16 86       	std	Z+14, r1	; 0x0e
 4f4:	08 95       	ret

000004f6 <oled_init>:
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	50 e1       	ldi	r21, 0x10	; 16
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	8e ea       	ldi	r24, 0xAE	; 174
 500:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	50 e1       	ldi	r21, 0x10	; 16
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	81 ea       	ldi	r24, 0xA1	; 161
 50e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	50 e1       	ldi	r21, 0x10	; 16
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	8a ed       	ldi	r24, 0xDA	; 218
 51c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 520:	40 e0       	ldi	r20, 0x00	; 0
 522:	50 e1       	ldi	r21, 0x10	; 16
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	82 e1       	ldi	r24, 0x12	; 18
 52a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	50 e1       	ldi	r21, 0x10	; 16
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	88 ec       	ldi	r24, 0xC8	; 200
 538:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 53c:	40 e0       	ldi	r20, 0x00	; 0
 53e:	50 e1       	ldi	r21, 0x10	; 16
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	88 ea       	ldi	r24, 0xA8	; 168
 546:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	50 e1       	ldi	r21, 0x10	; 16
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	8f e3       	ldi	r24, 0x3F	; 63
 554:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	50 e1       	ldi	r21, 0x10	; 16
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	85 ed       	ldi	r24, 0xD5	; 213
 562:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	50 e1       	ldi	r21, 0x10	; 16
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	80 e8       	ldi	r24, 0x80	; 128
 570:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 574:	40 e0       	ldi	r20, 0x00	; 0
 576:	50 e1       	ldi	r21, 0x10	; 16
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	81 e8       	ldi	r24, 0x81	; 129
 57e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e1       	ldi	r21, 0x10	; 16
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	80 e5       	ldi	r24, 0x50	; 80
 58c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 590:	40 e0       	ldi	r20, 0x00	; 0
 592:	50 e1       	ldi	r21, 0x10	; 16
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	89 ed       	ldi	r24, 0xD9	; 217
 59a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 59e:	40 e0       	ldi	r20, 0x00	; 0
 5a0:	50 e1       	ldi	r21, 0x10	; 16
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	81 e2       	ldi	r24, 0x21	; 33
 5a8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 5ac:	40 e0       	ldi	r20, 0x00	; 0
 5ae:	50 e1       	ldi	r21, 0x10	; 16
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	80 e2       	ldi	r24, 0x20	; 32
 5b6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 5ba:	40 e0       	ldi	r20, 0x00	; 0
 5bc:	50 e1       	ldi	r21, 0x10	; 16
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	82 e0       	ldi	r24, 0x02	; 2
 5c4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	50 e1       	ldi	r21, 0x10	; 16
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	8b ed       	ldi	r24, 0xDB	; 219
 5d2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 5d6:	40 e0       	ldi	r20, 0x00	; 0
 5d8:	50 e1       	ldi	r21, 0x10	; 16
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	80 e3       	ldi	r24, 0x30	; 48
 5e0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 5e4:	40 e0       	ldi	r20, 0x00	; 0
 5e6:	50 e1       	ldi	r21, 0x10	; 16
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	8d ea       	ldi	r24, 0xAD	; 173
 5ee:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	50 e1       	ldi	r21, 0x10	; 16
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	50 e1       	ldi	r21, 0x10	; 16
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	84 ea       	ldi	r24, 0xA4	; 164
 60a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	50 e1       	ldi	r21, 0x10	; 16
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	86 ea       	ldi	r24, 0xA6	; 166
 618:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	50 e1       	ldi	r21, 0x10	; 16
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	8f ea       	ldi	r24, 0xAF	; 175
 626:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 62a:	08 95       	ret

0000062c <OLED_goto_row>:
 62c:	40 e0       	ldi	r20, 0x00	; 0
 62e:	50 e1       	ldi	r21, 0x10	; 16
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	80 55       	subi	r24, 0x50	; 80
 636:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 63a:	08 95       	ret

0000063c <OLED_goto_column>:
 63c:	cf 93       	push	r28
 63e:	c8 2f       	mov	r28, r24
 640:	40 e0       	ldi	r20, 0x00	; 0
 642:	50 e1       	ldi	r21, 0x10	; 16
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	8f 70       	andi	r24, 0x0F	; 15
 64a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 64e:	8c 2f       	mov	r24, r28
 650:	85 95       	asr	r24
 652:	85 95       	asr	r24
 654:	85 95       	asr	r24
 656:	85 95       	asr	r24
 658:	40 e0       	ldi	r20, 0x00	; 0
 65a:	50 e1       	ldi	r21, 0x10	; 16
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	80 61       	ori	r24, 0x10	; 16
 662:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <OLED_pos>:
 66a:	cf 93       	push	r28
 66c:	c6 2f       	mov	r28, r22
 66e:	0e 94 16 03 	call	0x62c	; 0x62c <OLED_goto_row>
 672:	8c 2f       	mov	r24, r28
 674:	0e 94 1e 03 	call	0x63c	; 0x63c <OLED_goto_column>
 678:	cf 91       	pop	r28
 67a:	08 95       	ret

0000067c <OLED_clear_row>:
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_pos>
 686:	c0 e0       	ldi	r28, 0x00	; 0
 688:	d0 e0       	ldi	r29, 0x00	; 0
 68a:	08 c0       	rjmp	.+16     	; 0x69c <OLED_clear_row+0x20>
 68c:	40 e0       	ldi	r20, 0x00	; 0
 68e:	52 e1       	ldi	r21, 0x12	; 18
 690:	60 e0       	ldi	r22, 0x00	; 0
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 69a:	21 96       	adiw	r28, 0x01	; 1
 69c:	c0 38       	cpi	r28, 0x80	; 128
 69e:	d1 05       	cpc	r29, r1
 6a0:	ac f3       	brlt	.-22     	; 0x68c <OLED_clear_row+0x10>
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	08 95       	ret

000006a8 <OLED_reset>:
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_pos>
 6b4:	c0 e0       	ldi	r28, 0x00	; 0
 6b6:	d0 e0       	ldi	r29, 0x00	; 0
 6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <OLED_reset+0x20>
 6ba:	8c 2f       	mov	r24, r28
 6bc:	0e 94 3e 03 	call	0x67c	; 0x67c <OLED_clear_row>
 6c0:	8c 2f       	mov	r24, r28
 6c2:	0e 94 16 03 	call	0x62c	; 0x62c <OLED_goto_row>
 6c6:	21 96       	adiw	r28, 0x01	; 1
 6c8:	c8 30       	cpi	r28, 0x08	; 8
 6ca:	d1 05       	cpc	r29, r1
 6cc:	b4 f3       	brlt	.-20     	; 0x6ba <OLED_reset+0x12>
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	08 95       	ret

000006d4 <OLED_write_data>:
 6d4:	1f 93       	push	r17
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	18 2f       	mov	r17, r24
 6dc:	c0 e0       	ldi	r28, 0x00	; 0
 6de:	d0 e0       	ldi	r29, 0x00	; 0
 6e0:	15 c0       	rjmp	.+42     	; 0x70c <OLED_write_data+0x38>
 6e2:	e1 2f       	mov	r30, r17
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	b0 97       	sbiw	r30, 0x20	; 32
 6e8:	ee 0f       	add	r30, r30
 6ea:	ff 1f       	adc	r31, r31
 6ec:	ee 0f       	add	r30, r30
 6ee:	ff 1f       	adc	r31, r31
 6f0:	ee 0f       	add	r30, r30
 6f2:	ff 1f       	adc	r31, r31
 6f4:	ec 0f       	add	r30, r28
 6f6:	fd 1f       	adc	r31, r29
 6f8:	e0 59       	subi	r30, 0x90	; 144
 6fa:	ff 4f       	sbci	r31, 0xFF	; 255
 6fc:	84 91       	lpm	r24, Z
 6fe:	40 e0       	ldi	r20, 0x00	; 0
 700:	52 e1       	ldi	r21, 0x12	; 18
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 70a:	21 96       	adiw	r28, 0x01	; 1
 70c:	c8 30       	cpi	r28, 0x08	; 8
 70e:	d1 05       	cpc	r29, r1
 710:	44 f3       	brlt	.-48     	; 0x6e2 <OLED_write_data+0xe>
 712:	df 91       	pop	r29
 714:	cf 91       	pop	r28
 716:	1f 91       	pop	r17
 718:	08 95       	ret

0000071a <OLED_print>:
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	ec 01       	movw	r28, r24
 720:	40 e0       	ldi	r20, 0x00	; 0
 722:	50 e1       	ldi	r21, 0x10	; 16
 724:	60 e0       	ldi	r22, 0x00	; 0
 726:	70 e0       	ldi	r23, 0x00	; 0
 728:	80 e2       	ldi	r24, 0x20	; 32
 72a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 72e:	40 e0       	ldi	r20, 0x00	; 0
 730:	50 e1       	ldi	r21, 0x10	; 16
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	82 e0       	ldi	r24, 0x02	; 2
 738:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xmem_write>
 73c:	03 c0       	rjmp	.+6      	; 0x744 <OLED_print+0x2a>
 73e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OLED_write_data>
 742:	21 96       	adiw	r28, 0x01	; 1
 744:	88 81       	ld	r24, Y
 746:	81 11       	cpse	r24, r1
 748:	fa cf       	rjmp	.-12     	; 0x73e <OLED_print+0x24>
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	08 95       	ret

00000750 <create_menu_item>:
}

menu_item *create_menu_item (const char *name, menu_item *parent){
 750:	ef 92       	push	r14
 752:	ff 92       	push	r15
 754:	0f 93       	push	r16
 756:	1f 93       	push	r17
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	7c 01       	movw	r14, r24
 75e:	8b 01       	movw	r16, r22
	menu_item *new_item = (menu_item*) malloc(sizeof(menu_item));
 760:	8b e0       	ldi	r24, 0x0B	; 11
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 12 05 	call	0xa24	; 0xa24 <malloc>
 768:	ec 01       	movw	r28, r24
	new_item->menu_name = strdup(name);
 76a:	c7 01       	movw	r24, r14
 76c:	0e 94 33 06 	call	0xc66	; 0xc66 <strdup>
 770:	99 87       	std	Y+9, r25	; 0x09
 772:	88 87       	std	Y+8, r24	; 0x08
	new_item->parent = parent;
 774:	19 83       	std	Y+1, r17	; 0x01
 776:	08 83       	st	Y, r16
	new_item->first_child = NULL;
 778:	1b 82       	std	Y+3, r1	; 0x03
 77a:	1a 82       	std	Y+2, r1	; 0x02
	new_item->previous_sibling=NULL;
 77c:	1d 82       	std	Y+5, r1	; 0x05
 77e:	1c 82       	std	Y+4, r1	; 0x04
	new_item->next_sibling = NULL;
 780:	1f 82       	std	Y+7, r1	; 0x07
 782:	1e 82       	std	Y+6, r1	; 0x06
	return new_item;
}
 784:	ce 01       	movw	r24, r28
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	1f 91       	pop	r17
 78c:	0f 91       	pop	r16
 78e:	ff 90       	pop	r15
 790:	ef 90       	pop	r14
 792:	08 95       	ret

00000794 <add_submenu>:

void add_submenu(menu_item *parent, const char *name){
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	ec 01       	movw	r28, r24
 79a:	cb 01       	movw	r24, r22
	menu_item *new_item=create_menu_item(name,parent);
 79c:	be 01       	movw	r22, r28
 79e:	0e 94 a8 03 	call	0x750	; 0x750 <create_menu_item>
	if (parent->first_child==NULL){
 7a2:	ea 81       	ldd	r30, Y+2	; 0x02
 7a4:	fb 81       	ldd	r31, Y+3	; 0x03
 7a6:	30 97       	sbiw	r30, 0x00	; 0
 7a8:	21 f4       	brne	.+8      	; 0x7b2 <add_submenu+0x1e>
		parent->first_child = new_item;
 7aa:	9b 83       	std	Y+3, r25	; 0x03
 7ac:	8a 83       	std	Y+2, r24	; 0x02
 7ae:	0d c0       	rjmp	.+26     	; 0x7ca <add_submenu+0x36>
		} else {
		menu_item *current= parent->first_child;
		
		while(current->next_sibling!=NULL){
			current = current->next_sibling;
 7b0:	f9 01       	movw	r30, r18
	if (parent->first_child==NULL){
		parent->first_child = new_item;
		} else {
		menu_item *current= parent->first_child;
		
		while(current->next_sibling!=NULL){
 7b2:	26 81       	ldd	r18, Z+6	; 0x06
 7b4:	37 81       	ldd	r19, Z+7	; 0x07
 7b6:	21 15       	cp	r18, r1
 7b8:	31 05       	cpc	r19, r1
 7ba:	d1 f7       	brne	.-12     	; 0x7b0 <add_submenu+0x1c>
			current = current->next_sibling;
		}
		current->next_sibling=new_item;
 7bc:	97 83       	std	Z+7, r25	; 0x07
 7be:	86 83       	std	Z+6, r24	; 0x06
		new_item->previous_sibling=current;
 7c0:	dc 01       	movw	r26, r24
 7c2:	15 96       	adiw	r26, 0x05	; 5
 7c4:	fc 93       	st	X, r31
 7c6:	ee 93       	st	-X, r30
 7c8:	14 97       	sbiw	r26, 0x04	; 4
	}
}
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	08 95       	ret

000007d0 <add_submenu_from_list>:

void add_submenu_from_list(menu_item *parent, const char** menu_list, int8_t length){
 7d0:	df 92       	push	r13
 7d2:	ef 92       	push	r14
 7d4:	ff 92       	push	r15
 7d6:	0f 93       	push	r16
 7d8:	1f 93       	push	r17
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	7c 01       	movw	r14, r24
 7e0:	8b 01       	movw	r16, r22
 7e2:	d4 2e       	mov	r13, r20
	for(int i=0; i<length; i++){
 7e4:	c0 e0       	ldi	r28, 0x00	; 0
 7e6:	d0 e0       	ldi	r29, 0x00	; 0
 7e8:	0b c0       	rjmp	.+22     	; 0x800 <add_submenu_from_list+0x30>
		/*printf("%s: %s\n", parent->menu_name, menu_list[i]);*/
		add_submenu(parent, menu_list[i]);
 7ea:	fe 01       	movw	r30, r28
 7ec:	ee 0f       	add	r30, r30
 7ee:	ff 1f       	adc	r31, r31
 7f0:	e0 0f       	add	r30, r16
 7f2:	f1 1f       	adc	r31, r17
 7f4:	60 81       	ld	r22, Z
 7f6:	71 81       	ldd	r23, Z+1	; 0x01
 7f8:	c7 01       	movw	r24, r14
 7fa:	0e 94 ca 03 	call	0x794	; 0x794 <add_submenu>
		new_item->previous_sibling=current;
	}
}

void add_submenu_from_list(menu_item *parent, const char** menu_list, int8_t length){
	for(int i=0; i<length; i++){
 7fe:	21 96       	adiw	r28, 0x01	; 1
 800:	8d 2d       	mov	r24, r13
 802:	0d 2c       	mov	r0, r13
 804:	00 0c       	add	r0, r0
 806:	99 0b       	sbc	r25, r25
 808:	c8 17       	cp	r28, r24
 80a:	d9 07       	cpc	r29, r25
 80c:	74 f3       	brlt	.-36     	; 0x7ea <add_submenu_from_list+0x1a>
		/*printf("%s: %s\n", parent->menu_name, menu_list[i]);*/
		add_submenu(parent, menu_list[i]);
	}
}
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	1f 91       	pop	r17
 814:	0f 91       	pop	r16
 816:	ff 90       	pop	r15
 818:	ef 90       	pop	r14
 81a:	df 90       	pop	r13
 81c:	08 95       	ret

0000081e <OLED_print_menu_2>:


void OLED_print_menu_2(menu_item* parent){
 81e:	0f 93       	push	r16
 820:	1f 93       	push	r17
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	ec 01       	movw	r28, r24
	OLED_reset();
 828:	0e 94 54 03 	call	0x6a8	; 0x6a8 <OLED_reset>
	OLED_pos(0, 50);
 82c:	62 e3       	ldi	r22, 0x32	; 50
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_pos>
	OLED_print(parent->menu_name);
 834:	88 85       	ldd	r24, Y+8	; 0x08
 836:	99 85       	ldd	r25, Y+9	; 0x09
 838:	0e 94 8d 03 	call	0x71a	; 0x71a <OLED_print>
	menu_item *current=parent->first_child;
 83c:	0a 80       	ldd	r0, Y+2	; 0x02
 83e:	db 81       	ldd	r29, Y+3	; 0x03
 840:	c0 2d       	mov	r28, r0
	int i=1;
 842:	01 e0       	ldi	r16, 0x01	; 1
 844:	10 e0       	ldi	r17, 0x00	; 0
	while(current!=NULL){
 846:	0e c0       	rjmp	.+28     	; 0x864 <OLED_print_menu_2+0x46>
		OLED_pos(i+1, 10);
 848:	6a e0       	ldi	r22, 0x0A	; 10
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	80 0f       	add	r24, r16
 84e:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_pos>
		OLED_print(current->menu_name);
 852:	88 85       	ldd	r24, Y+8	; 0x08
 854:	99 85       	ldd	r25, Y+9	; 0x09
 856:	0e 94 8d 03 	call	0x71a	; 0x71a <OLED_print>
		current=current->next_sibling;
 85a:	0e 80       	ldd	r0, Y+6	; 0x06
 85c:	df 81       	ldd	r29, Y+7	; 0x07
 85e:	c0 2d       	mov	r28, r0
		i++;
 860:	0f 5f       	subi	r16, 0xFF	; 255
 862:	1f 4f       	sbci	r17, 0xFF	; 255
	OLED_reset();
	OLED_pos(0, 50);
	OLED_print(parent->menu_name);
	menu_item *current=parent->first_child;
	int i=1;
	while(current!=NULL){
 864:	20 97       	sbiw	r28, 0x00	; 0
 866:	81 f7       	brne	.-32     	; 0x848 <OLED_print_menu_2+0x2a>
		OLED_pos(i+1, 10);
		OLED_print(current->menu_name);
		current=current->next_sibling;
		i++;
	}
}
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	1f 91       	pop	r17
 86e:	0f 91       	pop	r16
 870:	08 95       	ret

00000872 <menu_init>:
	for(int i=0; i<page_number; i++){
		
	} 
}*/

void menu_init(IO *io){
 872:	ef 92       	push	r14
 874:	ff 92       	push	r15
 876:	0f 93       	push	r16
 878:	1f 93       	push	r17
 87a:	cf 93       	push	r28
 87c:	df 93       	push	r29
 87e:	cd b7       	in	r28, 0x3d	; 61
 880:	de b7       	in	r29, 0x3e	; 62
 882:	62 97       	sbiw	r28, 0x12	; 18
 884:	0f b6       	in	r0, 0x3f	; 63
 886:	f8 94       	cli
 888:	de bf       	out	0x3e, r29	; 62
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	cd bf       	out	0x3d, r28	; 61
 88e:	7c 01       	movw	r14, r24
	menu_item *menu = create_menu_item("Home", NULL); 
 890:	60 e0       	ldi	r22, 0x00	; 0
 892:	70 e0       	ldi	r23, 0x00	; 0
 894:	82 eb       	ldi	r24, 0xB2	; 178
 896:	91 e0       	ldi	r25, 0x01	; 1
 898:	0e 94 a8 03 	call	0x750	; 0x750 <create_menu_item>
 89c:	8c 01       	movw	r16, r24
	
	const char* home_menu[] = {"Menu 1", "Menu 2", "Menu 3", "Menu 4"};
 89e:	88 e0       	ldi	r24, 0x08	; 8
 8a0:	e4 e1       	ldi	r30, 0x14	; 20
 8a2:	f1 e0       	ldi	r31, 0x01	; 1
 8a4:	de 01       	movw	r26, r28
 8a6:	11 96       	adiw	r26, 0x01	; 1
 8a8:	01 90       	ld	r0, Z+
 8aa:	0d 92       	st	X+, r0
 8ac:	8a 95       	dec	r24
 8ae:	e1 f7       	brne	.-8      	; 0x8a8 <menu_init+0x36>
	add_submenu_from_list(menu, home_menu, 4);
 8b0:	44 e0       	ldi	r20, 0x04	; 4
 8b2:	be 01       	movw	r22, r28
 8b4:	6f 5f       	subi	r22, 0xFF	; 255
 8b6:	7f 4f       	sbci	r23, 0xFF	; 255
 8b8:	c8 01       	movw	r24, r16
 8ba:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <add_submenu_from_list>
	io->current_node = menu->first_child;
 8be:	f8 01       	movw	r30, r16
 8c0:	82 81       	ldd	r24, Z+2	; 0x02
 8c2:	93 81       	ldd	r25, Z+3	; 0x03
 8c4:	f7 01       	movw	r30, r14
 8c6:	95 87       	std	Z+13, r25	; 0x0d
 8c8:	84 87       	std	Z+12, r24	; 0x0c
	const char* home_menu1[] = {"Menu 1", "Menu 2", "Menu 3", "Menu 4", "Back"};
 8ca:	8a e0       	ldi	r24, 0x0A	; 10
 8cc:	ec e1       	ldi	r30, 0x1C	; 28
 8ce:	f1 e0       	ldi	r31, 0x01	; 1
 8d0:	de 01       	movw	r26, r28
 8d2:	19 96       	adiw	r26, 0x09	; 9
 8d4:	01 90       	ld	r0, Z+
 8d6:	0d 92       	st	X+, r0
 8d8:	8a 95       	dec	r24
 8da:	e1 f7       	brne	.-8      	; 0x8d4 <menu_init+0x62>
	add_submenu_from_list(menu->first_child, home_menu1, 5);
 8dc:	45 e0       	ldi	r20, 0x05	; 5
 8de:	be 01       	movw	r22, r28
 8e0:	67 5f       	subi	r22, 0xF7	; 247
 8e2:	7f 4f       	sbci	r23, 0xFF	; 255
 8e4:	f8 01       	movw	r30, r16
 8e6:	82 81       	ldd	r24, Z+2	; 0x02
 8e8:	93 81       	ldd	r25, Z+3	; 0x03
 8ea:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <add_submenu_from_list>
	OLED_print_menu_2(menu);
 8ee:	c8 01       	movw	r24, r16
 8f0:	0e 94 0f 04 	call	0x81e	; 0x81e <OLED_print_menu_2>
	
}
 8f4:	62 96       	adiw	r28, 0x12	; 18
 8f6:	0f b6       	in	r0, 0x3f	; 63
 8f8:	f8 94       	cli
 8fa:	de bf       	out	0x3e, r29	; 62
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	cd bf       	out	0x3d, r28	; 61
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	1f 91       	pop	r17
 906:	0f 91       	pop	r16
 908:	ff 90       	pop	r15
 90a:	ef 90       	pop	r14
 90c:	08 95       	ret

0000090e <pwm_init>:
	TCCR3B = (0<<WGM33) | (1<<WGM32) |(1<<CS30);
	OCR3B = 0;
};
		
void pwm_init(void) {
	DDRD |=(1<<DDD4);
 90e:	81 b3       	in	r24, 0x11	; 17
 910:	80 61       	ori	r24, 0x10	; 16
 912:	81 bb       	out	0x11, r24	; 17
	TCCR3A = (0<<COM3A0) | (1<<COM3A1) | (0<<WGM31) | (1<<WGM30);
 914:	81 e8       	ldi	r24, 0x81	; 129
 916:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fc08b>
	TCCR3B = (0<<ICES3) | (1<<WGM32) |(1<<CS30);
 91a:	89 e0       	ldi	r24, 0x09	; 9
 91c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fc08a>
	OCR3B = 0;
 920:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 924:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 928:	08 95       	ret

0000092a <main>:
};

int main(void)
{
 92a:	cf 93       	push	r28
 92c:	df 93       	push	r29
 92e:	cd b7       	in	r28, 0x3d	; 61
 930:	de b7       	in	r29, 0x3e	; 62
 932:	6a 97       	sbiw	r28, 0x1a	; 26
 934:	0f b6       	in	r0, 0x3f	; 63
 936:	f8 94       	cli
 938:	de bf       	out	0x3e, r29	; 62
 93a:	0f be       	out	0x3f, r0	; 63
 93c:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */
	pwm_init();
 93e:	0e 94 87 04 	call	0x90e	; 0x90e <pwm_init>
	USART_Init(MYUBRR);
 942:	8f e1       	ldi	r24, 0x1F	; 31
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <USART_Init>

	init_printf();
 94a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <init_printf>
	xmem_init();
 94e:	0e 94 03 05 	call	0xa06	; 0xa06 <xmem_init>
	oled_init();
 952:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <oled_init>
	IO io;
	io_init(&io);
 956:	ce 01       	movw	r24, r28
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <io_init>
	OLED_reset();
 95e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <OLED_reset>
	//OLED_print_menu((char** ) current_menu->items, current_menu->num_items);
	
	//const char* menu1[] = {"Menu 1", "HOME", "Test 1", "Test 2"};
	//int16_t menu1_length = sizeof(menu1) / sizeof(menu1[0]);
	
	menu_init(&io);
 962:	ce 01       	movw	r24, r28
 964:	01 96       	adiw	r24, 0x01	; 1
 966:	0e 94 39 04 	call	0x872	; 0x872 <menu_init>
	SPI_master_init();
 96a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <SPI_master_init>
	can_cntrl_config();
 96e:	0e 94 0f 02 	call	0x41e	; 0x41e <can_cntrl_config>
	
	can_message msg = {0x7ff,0x02,{0xCC, 0xBB}};
 972:	fe 01       	movw	r30, r28
 974:	70 96       	adiw	r30, 0x10	; 16
 976:	8b e0       	ldi	r24, 0x0B	; 11
 978:	df 01       	movw	r26, r30
 97a:	1d 92       	st	X+, r1
 97c:	8a 95       	dec	r24
 97e:	e9 f7       	brne	.-6      	; 0x97a <main+0x50>
 980:	8f ef       	ldi	r24, 0xFF	; 255
 982:	97 e0       	ldi	r25, 0x07	; 7
 984:	99 8b       	std	Y+17, r25	; 0x11
 986:	88 8b       	std	Y+16, r24	; 0x10
 988:	82 e0       	ldi	r24, 0x02	; 2
 98a:	8a 8b       	std	Y+18, r24	; 0x12
 98c:	8c ec       	ldi	r24, 0xCC	; 204
 98e:	8b 8b       	std	Y+19, r24	; 0x13
 990:	8b eb       	ldi	r24, 0xBB	; 187
 992:	8c 8b       	std	Y+20, r24	; 0x14
		uint8_t out2 = can_cntrl_read(RXB0D1);
		*/
	
    while (1) 
    {
		can_message_send(&msg);
 994:	ce 01       	movw	r24, r28
 996:	40 96       	adiw	r24, 0x10	; 16
 998:	0e 94 30 02 	call	0x460	; 0x460 <can_message_send>
 99c:	fb cf       	rjmp	.-10     	; 0x994 <main+0x6a>

0000099e <SPI_SS_low>:
#include "SPI.h"


void SPI_SS_low(void) {
	PORTB &= ~(1 << PB4);  // Pull SS/CS (PB4) low to select the slave
 99e:	88 b3       	in	r24, 0x18	; 24
 9a0:	8f 7e       	andi	r24, 0xEF	; 239
 9a2:	88 bb       	out	0x18, r24	; 24
 9a4:	08 95       	ret

000009a6 <SPI_SS_high>:
}

void SPI_SS_high(void) {
	PORTB |= (1 << PB4);   // Pull SS/CS (PB4) high to deselect the slave
 9a6:	88 b3       	in	r24, 0x18	; 24
 9a8:	80 61       	ori	r24, 0x10	; 16
 9aa:	88 bb       	out	0x18, r24	; 24
 9ac:	08 95       	ret

000009ae <SPI_master_init>:
}


//SPI functions
void SPI_master_init(void){
	DDRB = (1<<PB5)|(1<<PB7)|(1<<PB4); //Set MOSI and SCK output, all others input
 9ae:	80 eb       	ldi	r24, 0xB0	; 176
 9b0:	87 bb       	out	0x17, r24	; 23
	SPI_SS_high();
 9b2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <SPI_SS_high>
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Enable SPI, Master, set clock rate fck/16
 9b6:	81 e5       	ldi	r24, 0x51	; 81
 9b8:	8d b9       	out	0x0d, r24	; 13
 9ba:	08 95       	ret

000009bc <SPI_MasterTransmit>:
}

uint8_t SPI_MasterTransmit(char cData){
	SPDR = cData; //Start transmission
 9bc:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))); //Wait for transmission complete
 9be:	77 9b       	sbis	0x0e, 7	; 14
 9c0:	fe cf       	rjmp	.-4      	; 0x9be <SPI_MasterTransmit+0x2>
	return SPDR;
 9c2:	8f b1       	in	r24, 0x0f	; 15
}
 9c4:	08 95       	ret

000009c6 <USART_Init>:
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
	;
	/* Get and return received data from buffer */
	return UDR0;
}
 9c6:	90 bd       	out	0x20, r25	; 32
 9c8:	89 b9       	out	0x09, r24	; 9
 9ca:	88 e1       	ldi	r24, 0x18	; 24
 9cc:	8a b9       	out	0x0a, r24	; 10
 9ce:	8e e8       	ldi	r24, 0x8E	; 142
 9d0:	80 bd       	out	0x20, r24	; 32
 9d2:	08 95       	ret

000009d4 <USART_Transmit>:
 9d4:	5d 9b       	sbis	0x0b, 5	; 11
 9d6:	fe cf       	rjmp	.-4      	; 0x9d4 <USART_Transmit>
 9d8:	8c b9       	out	0x0c, r24	; 12
 9da:	08 95       	ret

000009dc <uart_putchar>:
 9dc:	cf 93       	push	r28
 9de:	c8 2f       	mov	r28, r24
 9e0:	8a 30       	cpi	r24, 0x0A	; 10
 9e2:	19 f4       	brne	.+6      	; 0x9ea <uart_putchar+0xe>
 9e4:	8d e0       	ldi	r24, 0x0D	; 13
 9e6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <USART_Transmit>
 9ea:	8c 2f       	mov	r24, r28
 9ec:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <USART_Transmit>
 9f0:	80 e0       	ldi	r24, 0x00	; 0
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	cf 91       	pop	r28
 9f6:	08 95       	ret

000009f8 <init_printf>:


void init_printf(void)
{
	static FILE uart_stdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
	stdout = &uart_stdout;  // Set stdout to use uart_putchar
 9f8:	86 e0       	ldi	r24, 0x06	; 6
 9fa:	91 e0       	ldi	r25, 0x01	; 1
 9fc:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <__iob+0x3>
 a00:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__iob+0x2>
 a04:	08 95       	ret

00000a06 <xmem_init>:
#include "xmem.h"
#include <avr/io.h>


void xmem_init ( void ){
	MCUCR |= (1 << SRE ); // enable XMEM
 a06:	85 b7       	in	r24, 0x35	; 53
 a08:	80 68       	ori	r24, 0x80	; 128
 a0a:	85 bf       	out	0x35, r24	; 53
	
	SFIOR &= ~(1 << XMM0 | 1 << XMM1 ); // mask bits / reduce bus width
 a0c:	80 b7       	in	r24, 0x30	; 48
 a0e:	87 7e       	andi	r24, 0xE7	; 231
 a10:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (1 << XMM2 );
 a12:	80 b7       	in	r24, 0x30	; 48
 a14:	80 62       	ori	r24, 0x20	; 32
 a16:	80 bf       	out	0x30, r24	; 48
 a18:	08 95       	ret

00000a1a <xmem_write>:
}

void xmem_write ( uint8_t data , uint16_t addr, uint16_t base_address){
	volatile char * ext_mem = ( char *) base_address ;
	ext_mem [ addr ]= data ;
 a1a:	fa 01       	movw	r30, r20
 a1c:	e6 0f       	add	r30, r22
 a1e:	f7 1f       	adc	r31, r23
 a20:	80 83       	st	Z, r24
 a22:	08 95       	ret

00000a24 <malloc>:
 a24:	0f 93       	push	r16
 a26:	1f 93       	push	r17
 a28:	cf 93       	push	r28
 a2a:	df 93       	push	r29
 a2c:	82 30       	cpi	r24, 0x02	; 2
 a2e:	91 05       	cpc	r25, r1
 a30:	10 f4       	brcc	.+4      	; 0xa36 <malloc+0x12>
 a32:	82 e0       	ldi	r24, 0x02	; 2
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <__flp>
 a3a:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <__flp+0x1>
 a3e:	20 e0       	ldi	r18, 0x00	; 0
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	a0 e0       	ldi	r26, 0x00	; 0
 a44:	b0 e0       	ldi	r27, 0x00	; 0
 a46:	30 97       	sbiw	r30, 0x00	; 0
 a48:	19 f1       	breq	.+70     	; 0xa90 <malloc+0x6c>
 a4a:	40 81       	ld	r20, Z
 a4c:	51 81       	ldd	r21, Z+1	; 0x01
 a4e:	02 81       	ldd	r16, Z+2	; 0x02
 a50:	13 81       	ldd	r17, Z+3	; 0x03
 a52:	48 17       	cp	r20, r24
 a54:	59 07       	cpc	r21, r25
 a56:	c8 f0       	brcs	.+50     	; 0xa8a <malloc+0x66>
 a58:	84 17       	cp	r24, r20
 a5a:	95 07       	cpc	r25, r21
 a5c:	69 f4       	brne	.+26     	; 0xa78 <malloc+0x54>
 a5e:	10 97       	sbiw	r26, 0x00	; 0
 a60:	31 f0       	breq	.+12     	; 0xa6e <malloc+0x4a>
 a62:	12 96       	adiw	r26, 0x02	; 2
 a64:	0c 93       	st	X, r16
 a66:	12 97       	sbiw	r26, 0x02	; 2
 a68:	13 96       	adiw	r26, 0x03	; 3
 a6a:	1c 93       	st	X, r17
 a6c:	27 c0       	rjmp	.+78     	; 0xabc <malloc+0x98>
 a6e:	00 93 da 01 	sts	0x01DA, r16	; 0x8001da <__flp>
 a72:	10 93 db 01 	sts	0x01DB, r17	; 0x8001db <__flp+0x1>
 a76:	22 c0       	rjmp	.+68     	; 0xabc <malloc+0x98>
 a78:	21 15       	cp	r18, r1
 a7a:	31 05       	cpc	r19, r1
 a7c:	19 f0       	breq	.+6      	; 0xa84 <malloc+0x60>
 a7e:	42 17       	cp	r20, r18
 a80:	53 07       	cpc	r21, r19
 a82:	18 f4       	brcc	.+6      	; 0xa8a <malloc+0x66>
 a84:	9a 01       	movw	r18, r20
 a86:	bd 01       	movw	r22, r26
 a88:	ef 01       	movw	r28, r30
 a8a:	df 01       	movw	r26, r30
 a8c:	f8 01       	movw	r30, r16
 a8e:	db cf       	rjmp	.-74     	; 0xa46 <malloc+0x22>
 a90:	21 15       	cp	r18, r1
 a92:	31 05       	cpc	r19, r1
 a94:	f9 f0       	breq	.+62     	; 0xad4 <malloc+0xb0>
 a96:	28 1b       	sub	r18, r24
 a98:	39 0b       	sbc	r19, r25
 a9a:	24 30       	cpi	r18, 0x04	; 4
 a9c:	31 05       	cpc	r19, r1
 a9e:	80 f4       	brcc	.+32     	; 0xac0 <malloc+0x9c>
 aa0:	8a 81       	ldd	r24, Y+2	; 0x02
 aa2:	9b 81       	ldd	r25, Y+3	; 0x03
 aa4:	61 15       	cp	r22, r1
 aa6:	71 05       	cpc	r23, r1
 aa8:	21 f0       	breq	.+8      	; 0xab2 <malloc+0x8e>
 aaa:	fb 01       	movw	r30, r22
 aac:	93 83       	std	Z+3, r25	; 0x03
 aae:	82 83       	std	Z+2, r24	; 0x02
 ab0:	04 c0       	rjmp	.+8      	; 0xaba <malloc+0x96>
 ab2:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <__flp+0x1>
 ab6:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__flp>
 aba:	fe 01       	movw	r30, r28
 abc:	32 96       	adiw	r30, 0x02	; 2
 abe:	44 c0       	rjmp	.+136    	; 0xb48 <malloc+0x124>
 ac0:	fe 01       	movw	r30, r28
 ac2:	e2 0f       	add	r30, r18
 ac4:	f3 1f       	adc	r31, r19
 ac6:	81 93       	st	Z+, r24
 ac8:	91 93       	st	Z+, r25
 aca:	22 50       	subi	r18, 0x02	; 2
 acc:	31 09       	sbc	r19, r1
 ace:	39 83       	std	Y+1, r19	; 0x01
 ad0:	28 83       	st	Y, r18
 ad2:	3a c0       	rjmp	.+116    	; 0xb48 <malloc+0x124>
 ad4:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <__data_end>
 ad8:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <__data_end+0x1>
 adc:	23 2b       	or	r18, r19
 ade:	41 f4       	brne	.+16     	; 0xaf0 <malloc+0xcc>
 ae0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 ae4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 ae8:	30 93 d9 01 	sts	0x01D9, r19	; 0x8001d9 <__data_end+0x1>
 aec:	20 93 d8 01 	sts	0x01D8, r18	; 0x8001d8 <__data_end>
 af0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 af4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 af8:	21 15       	cp	r18, r1
 afa:	31 05       	cpc	r19, r1
 afc:	41 f4       	brne	.+16     	; 0xb0e <malloc+0xea>
 afe:	2d b7       	in	r18, 0x3d	; 61
 b00:	3e b7       	in	r19, 0x3e	; 62
 b02:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 b06:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 b0a:	24 1b       	sub	r18, r20
 b0c:	35 0b       	sbc	r19, r21
 b0e:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <__data_end>
 b12:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <__data_end+0x1>
 b16:	e2 17       	cp	r30, r18
 b18:	f3 07       	cpc	r31, r19
 b1a:	a0 f4       	brcc	.+40     	; 0xb44 <malloc+0x120>
 b1c:	2e 1b       	sub	r18, r30
 b1e:	3f 0b       	sbc	r19, r31
 b20:	28 17       	cp	r18, r24
 b22:	39 07       	cpc	r19, r25
 b24:	78 f0       	brcs	.+30     	; 0xb44 <malloc+0x120>
 b26:	ac 01       	movw	r20, r24
 b28:	4e 5f       	subi	r20, 0xFE	; 254
 b2a:	5f 4f       	sbci	r21, 0xFF	; 255
 b2c:	24 17       	cp	r18, r20
 b2e:	35 07       	cpc	r19, r21
 b30:	48 f0       	brcs	.+18     	; 0xb44 <malloc+0x120>
 b32:	4e 0f       	add	r20, r30
 b34:	5f 1f       	adc	r21, r31
 b36:	50 93 d9 01 	sts	0x01D9, r21	; 0x8001d9 <__data_end+0x1>
 b3a:	40 93 d8 01 	sts	0x01D8, r20	; 0x8001d8 <__data_end>
 b3e:	81 93       	st	Z+, r24
 b40:	91 93       	st	Z+, r25
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <malloc+0x124>
 b44:	e0 e0       	ldi	r30, 0x00	; 0
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	cf 01       	movw	r24, r30
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	1f 91       	pop	r17
 b50:	0f 91       	pop	r16
 b52:	08 95       	ret

00000b54 <free>:
 b54:	cf 93       	push	r28
 b56:	df 93       	push	r29
 b58:	00 97       	sbiw	r24, 0x00	; 0
 b5a:	09 f4       	brne	.+2      	; 0xb5e <free+0xa>
 b5c:	81 c0       	rjmp	.+258    	; 0xc60 <free+0x10c>
 b5e:	fc 01       	movw	r30, r24
 b60:	32 97       	sbiw	r30, 0x02	; 2
 b62:	13 82       	std	Z+3, r1	; 0x03
 b64:	12 82       	std	Z+2, r1	; 0x02
 b66:	a0 91 da 01 	lds	r26, 0x01DA	; 0x8001da <__flp>
 b6a:	b0 91 db 01 	lds	r27, 0x01DB	; 0x8001db <__flp+0x1>
 b6e:	10 97       	sbiw	r26, 0x00	; 0
 b70:	81 f4       	brne	.+32     	; 0xb92 <free+0x3e>
 b72:	20 81       	ld	r18, Z
 b74:	31 81       	ldd	r19, Z+1	; 0x01
 b76:	82 0f       	add	r24, r18
 b78:	93 1f       	adc	r25, r19
 b7a:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <__data_end>
 b7e:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <__data_end+0x1>
 b82:	28 17       	cp	r18, r24
 b84:	39 07       	cpc	r19, r25
 b86:	51 f5       	brne	.+84     	; 0xbdc <free+0x88>
 b88:	f0 93 d9 01 	sts	0x01D9, r31	; 0x8001d9 <__data_end+0x1>
 b8c:	e0 93 d8 01 	sts	0x01D8, r30	; 0x8001d8 <__data_end>
 b90:	67 c0       	rjmp	.+206    	; 0xc60 <free+0x10c>
 b92:	ed 01       	movw	r28, r26
 b94:	20 e0       	ldi	r18, 0x00	; 0
 b96:	30 e0       	ldi	r19, 0x00	; 0
 b98:	ce 17       	cp	r28, r30
 b9a:	df 07       	cpc	r29, r31
 b9c:	40 f4       	brcc	.+16     	; 0xbae <free+0x5a>
 b9e:	4a 81       	ldd	r20, Y+2	; 0x02
 ba0:	5b 81       	ldd	r21, Y+3	; 0x03
 ba2:	9e 01       	movw	r18, r28
 ba4:	41 15       	cp	r20, r1
 ba6:	51 05       	cpc	r21, r1
 ba8:	f1 f0       	breq	.+60     	; 0xbe6 <free+0x92>
 baa:	ea 01       	movw	r28, r20
 bac:	f5 cf       	rjmp	.-22     	; 0xb98 <free+0x44>
 bae:	d3 83       	std	Z+3, r29	; 0x03
 bb0:	c2 83       	std	Z+2, r28	; 0x02
 bb2:	40 81       	ld	r20, Z
 bb4:	51 81       	ldd	r21, Z+1	; 0x01
 bb6:	84 0f       	add	r24, r20
 bb8:	95 1f       	adc	r25, r21
 bba:	c8 17       	cp	r28, r24
 bbc:	d9 07       	cpc	r29, r25
 bbe:	59 f4       	brne	.+22     	; 0xbd6 <free+0x82>
 bc0:	88 81       	ld	r24, Y
 bc2:	99 81       	ldd	r25, Y+1	; 0x01
 bc4:	84 0f       	add	r24, r20
 bc6:	95 1f       	adc	r25, r21
 bc8:	02 96       	adiw	r24, 0x02	; 2
 bca:	91 83       	std	Z+1, r25	; 0x01
 bcc:	80 83       	st	Z, r24
 bce:	8a 81       	ldd	r24, Y+2	; 0x02
 bd0:	9b 81       	ldd	r25, Y+3	; 0x03
 bd2:	93 83       	std	Z+3, r25	; 0x03
 bd4:	82 83       	std	Z+2, r24	; 0x02
 bd6:	21 15       	cp	r18, r1
 bd8:	31 05       	cpc	r19, r1
 bda:	29 f4       	brne	.+10     	; 0xbe6 <free+0x92>
 bdc:	f0 93 db 01 	sts	0x01DB, r31	; 0x8001db <__flp+0x1>
 be0:	e0 93 da 01 	sts	0x01DA, r30	; 0x8001da <__flp>
 be4:	3d c0       	rjmp	.+122    	; 0xc60 <free+0x10c>
 be6:	e9 01       	movw	r28, r18
 be8:	fb 83       	std	Y+3, r31	; 0x03
 bea:	ea 83       	std	Y+2, r30	; 0x02
 bec:	49 91       	ld	r20, Y+
 bee:	59 91       	ld	r21, Y+
 bf0:	c4 0f       	add	r28, r20
 bf2:	d5 1f       	adc	r29, r21
 bf4:	ec 17       	cp	r30, r28
 bf6:	fd 07       	cpc	r31, r29
 bf8:	61 f4       	brne	.+24     	; 0xc12 <free+0xbe>
 bfa:	80 81       	ld	r24, Z
 bfc:	91 81       	ldd	r25, Z+1	; 0x01
 bfe:	84 0f       	add	r24, r20
 c00:	95 1f       	adc	r25, r21
 c02:	02 96       	adiw	r24, 0x02	; 2
 c04:	e9 01       	movw	r28, r18
 c06:	99 83       	std	Y+1, r25	; 0x01
 c08:	88 83       	st	Y, r24
 c0a:	82 81       	ldd	r24, Z+2	; 0x02
 c0c:	93 81       	ldd	r25, Z+3	; 0x03
 c0e:	9b 83       	std	Y+3, r25	; 0x03
 c10:	8a 83       	std	Y+2, r24	; 0x02
 c12:	e0 e0       	ldi	r30, 0x00	; 0
 c14:	f0 e0       	ldi	r31, 0x00	; 0
 c16:	12 96       	adiw	r26, 0x02	; 2
 c18:	8d 91       	ld	r24, X+
 c1a:	9c 91       	ld	r25, X
 c1c:	13 97       	sbiw	r26, 0x03	; 3
 c1e:	00 97       	sbiw	r24, 0x00	; 0
 c20:	19 f0       	breq	.+6      	; 0xc28 <free+0xd4>
 c22:	fd 01       	movw	r30, r26
 c24:	dc 01       	movw	r26, r24
 c26:	f7 cf       	rjmp	.-18     	; 0xc16 <free+0xc2>
 c28:	8d 91       	ld	r24, X+
 c2a:	9c 91       	ld	r25, X
 c2c:	11 97       	sbiw	r26, 0x01	; 1
 c2e:	9d 01       	movw	r18, r26
 c30:	2e 5f       	subi	r18, 0xFE	; 254
 c32:	3f 4f       	sbci	r19, 0xFF	; 255
 c34:	82 0f       	add	r24, r18
 c36:	93 1f       	adc	r25, r19
 c38:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <__data_end>
 c3c:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <__data_end+0x1>
 c40:	28 17       	cp	r18, r24
 c42:	39 07       	cpc	r19, r25
 c44:	69 f4       	brne	.+26     	; 0xc60 <free+0x10c>
 c46:	30 97       	sbiw	r30, 0x00	; 0
 c48:	29 f4       	brne	.+10     	; 0xc54 <free+0x100>
 c4a:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <__flp+0x1>
 c4e:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__flp>
 c52:	02 c0       	rjmp	.+4      	; 0xc58 <free+0x104>
 c54:	13 82       	std	Z+3, r1	; 0x03
 c56:	12 82       	std	Z+2, r1	; 0x02
 c58:	b0 93 d9 01 	sts	0x01D9, r27	; 0x8001d9 <__data_end+0x1>
 c5c:	a0 93 d8 01 	sts	0x01D8, r26	; 0x8001d8 <__data_end>
 c60:	df 91       	pop	r29
 c62:	cf 91       	pop	r28
 c64:	08 95       	ret

00000c66 <strdup>:
 c66:	0f 93       	push	r16
 c68:	1f 93       	push	r17
 c6a:	cf 93       	push	r28
 c6c:	df 93       	push	r29
 c6e:	8c 01       	movw	r16, r24
 c70:	fc 01       	movw	r30, r24
 c72:	01 90       	ld	r0, Z+
 c74:	00 20       	and	r0, r0
 c76:	e9 f7       	brne	.-6      	; 0xc72 <strdup+0xc>
 c78:	cf 01       	movw	r24, r30
 c7a:	80 1b       	sub	r24, r16
 c7c:	91 0b       	sbc	r25, r17
 c7e:	0e 94 12 05 	call	0xa24	; 0xa24 <malloc>
 c82:	ec 01       	movw	r28, r24
 c84:	00 97       	sbiw	r24, 0x00	; 0
 c86:	19 f0       	breq	.+6      	; 0xc8e <strdup+0x28>
 c88:	b8 01       	movw	r22, r16
 c8a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <strcpy>
 c8e:	ce 01       	movw	r24, r28
 c90:	df 91       	pop	r29
 c92:	cf 91       	pop	r28
 c94:	1f 91       	pop	r17
 c96:	0f 91       	pop	r16
 c98:	08 95       	ret

00000c9a <strcpy>:
 c9a:	fb 01       	movw	r30, r22
 c9c:	dc 01       	movw	r26, r24
 c9e:	01 90       	ld	r0, Z+
 ca0:	0d 92       	st	X+, r0
 ca2:	00 20       	and	r0, r0
 ca4:	e1 f7       	brne	.-8      	; 0xc9e <strcpy+0x4>
 ca6:	08 95       	ret

00000ca8 <_exit>:
 ca8:	f8 94       	cli

00000caa <__stop_program>:
 caa:	ff cf       	rjmp	.-2      	; 0xcaa <__stop_program>
